架构概览
==========
PyCreeper的整体架构可以分为引擎，下载器，下载器中间件，调度器，爬虫五个部分。
在各个部分之间传递的数据为Request/Response对象。

数据的流动方向如下图的绿色箭头所示。

各个部分的功能简述
--------------------

.. image:: _static/structure.jpg

------------------------------------

**引擎** 是PyCreeper的核心部分，负责调度各个部分的工作。引擎在内部的实现为gevent.Pool。
 
**下载器** 负责下载request请求，在这里将静态请求与动态请求分别处理，静态请求使用requests库实现，
动态请求使用selenium.webdriver实现。在请求完成后，将响应返回给引擎。

**下载器中间件** 可以理解为存在于下载器和引擎之间的钩子系统，可以通过自定义下载器中间件完成对request和response的特殊处理。
 
**调度器** 调度器实现的核心为gevent中的Queue和布隆过滤器，通过对requests进行判重，非重复请求入队，等待引擎取走处理。
 
**爬虫** 爬虫相当于对用户定义的接口，由用户来定义起始的url，对于各个request的callback以及对于爬取结果的处理方法。
 
数据流动过程
-------------

数据流动的过程如下面各个步骤所示：

#. 引擎启动，将爬虫中的start_urls加入到调度器中。

#. 引擎从调度器中取得一个request。

#. 引擎将请求交给下载器处理，中间经过了下载器中间件对于request的处理。

#. 下载器根据request的类型分别操作，静态请求交给requests库，动态请求使用selenium.webdriver加载。

#. 下载器将response返回给引擎，中间经过下载器中间件对response的处理。
 
#. 引擎将response交给爬虫定义的处理方法。
 
#. 爬虫的处理方法可能返回一个request（转2），或者返回一个包含爬取结果的字典（转下一个）。
 
#. 引擎根据爬虫定义的对于爬取结果的处理方法，处理结果。



